name: 🏷️ Release

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version type (patch, minor, major)'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

permissions:
  contents: write

jobs:
  release:
    name: 🏷️ Create Release
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip release]')"
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci

      - name: 🧪 Run tests
        run: npm run test

      - name: 🏗️ Build application
        run: npm run build

      - name: 📦 Create release
        id: create_release
        run: |
          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Determine version type
          VERSION_TYPE="${{ github.event.inputs.version || 'patch' }}"
          
          # Update version
          NEW_VERSION=$(npm version $VERSION_TYPE --no-git-tag-version)
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          
          # Commit and tag
          git add package.json package-lock.json
          git commit -m "chore: release $NEW_VERSION [skip release]"
          git tag $NEW_VERSION
          
          # Push changes
          git push origin main
          git push origin $NEW_VERSION
          
          echo "✅ Created release $NEW_VERSION"

      - name: 🎉 Create GitHub Release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const newVersion = '${{ steps.create_release.outputs.new_version }}';
            
            // Create the release
            const release = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: newVersion,
              name: `Release ${newVersion}`,
              body: `🚀 New release ${newVersion}\n\nAuto-generated from commit ${context.sha}`,
              draft: false,
              prerelease: false
            });
            
            console.log(`✅ Created GitHub Release: ${release.data.html_url}`); 