name: 🚀 Deploy - Continuous Deployment

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      version:
        description: 'Version to deploy (tag name)'
        required: false
        type: string

permissions:
  contents: read
  deployments: write

jobs:
  # ===============================================
  # 🎯 DETERMINE DEPLOYMENT STRATEGY
  # ===============================================
  strategy:
    name: 🎯 Deployment Strategy
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.strategy.outputs.environment }}
      should_deploy: ${{ steps.strategy.outputs.should_deploy }}
      version: ${{ steps.strategy.outputs.version }}
      is_prerelease: ${{ steps.strategy.outputs.is_prerelease }}
    
    steps:
      - name: 🎯 Determine deployment strategy
        id: strategy
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # Manual deployment
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "version=${{ github.event.inputs.version || github.ref_name }}" >> $GITHUB_OUTPUT
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "release" ]; then
            # Automatic deployment on release
            if [ "${{ github.event.release.prerelease }}" = "true" ]; then
              echo "environment=staging" >> $GITHUB_OUTPUT
              echo "is_prerelease=true" >> $GITHUB_OUTPUT
            else
              echo "environment=production" >> $GITHUB_OUTPUT
              echo "is_prerelease=false" >> $GITHUB_OUTPUT
            fi
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "version=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
          else
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          fi

  # ===============================================
  # 🏗️ BUILD FOR DEPLOYMENT
  # ===============================================
  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    needs: strategy
    if: needs.strategy.outputs.should_deploy == 'true'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.strategy.outputs.version }}

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci

      - name: 🧪 Run tests
        run: npm run test:coverage

      - name: 🏗️ Build application
        env:
          NODE_ENV: production
          NEXT_PUBLIC_APP_VERSION: ${{ needs.strategy.outputs.version }}
          NEXT_PUBLIC_BUILD_TIME: ${{ github.run_number }}
        run: |
          echo "Building for ${{ needs.strategy.outputs.environment }} environment"
          npm run build

      - name: 📦 Create deployment package
        run: |
          # Create deployment package
          tar -czf deployment-${{ needs.strategy.outputs.version }}.tar.gz \
            .next/ \
            public/ \
            package.json \
            package-lock.json \
            next.config.ts \
            --exclude=node_modules

      - name: 📤 Upload deployment artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deployment-package-${{ needs.strategy.outputs.version }}
          path: deployment-${{ needs.strategy.outputs.version }}.tar.gz
          retention-days: 30

  # ===============================================
  # 🚀 DEPLOY TO STAGING
  # ===============================================
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [strategy, build]
    if: needs.strategy.outputs.should_deploy == 'true' && needs.strategy.outputs.environment == 'staging'
    environment: 
      name: staging
      url: https://staging.applause-teste.com
    
    steps:
      - name: 📥 Download deployment package
        uses: actions/download-artifact@v4
        with:
          name: deployment-package-${{ needs.strategy.outputs.version }}

      - name: 🚀 Deploy to Staging (Vercel)
        id: deploy-vercel
        run: |
          echo "🚀 Deploying ${{ needs.strategy.outputs.version }} to Staging"
          
          # Example Vercel deployment
          # npx vercel --prod --token ${{ secrets.VERCEL_TOKEN }}
          
          # Mock deployment for demonstration
          echo "✅ Deployment successful!"
          echo "🔗 Staging URL: https://staging-${{ github.run_number }}.applause-teste.vercel.app"
          
          # Set deployment URL output
          echo "deployment_url=https://staging-${{ github.run_number }}.applause-teste.vercel.app" >> $GITHUB_OUTPUT

      - name: 🧪 Run smoke tests
        run: |
          echo "🧪 Running smoke tests against staging..."
          
          # Example smoke tests
          STAGING_URL="${{ steps.deploy-vercel.outputs.deployment_url }}"
          
          # Test if site is accessible
          # curl -f $STAGING_URL || exit 1
          
          echo "✅ Smoke tests passed!"

      - name: 📝 Update deployment status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment?.id || 0,
              state: '${{ job.status }}' === 'success' ? 'success' : 'failure',
              environment_url: '${{ steps.deploy-vercel.outputs.deployment_url }}',
              description: 'Staging deployment ${{ job.status }}'
            });

  # ===============================================
  # 🚀 DEPLOY TO PRODUCTION
  # ===============================================
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [strategy, build]
    if: needs.strategy.outputs.should_deploy == 'true' && needs.strategy.outputs.environment == 'production'
    environment: 
      name: production
      url: https://applause-teste.com
    
    steps:
      - name: 📥 Download deployment package
        uses: actions/download-artifact@v4
        with:
          name: deployment-package-${{ needs.strategy.outputs.version }}

      - name: 🚀 Deploy to Production (Vercel)
        id: deploy-vercel
        run: |
          echo "🚀 Deploying ${{ needs.strategy.outputs.version }} to Production"
          
          # Example Vercel production deployment
          # npx vercel --prod --token ${{ secrets.VERCEL_TOKEN }}
          
          # Mock deployment for demonstration
          echo "✅ Production deployment successful!"
          echo "🔗 Production URL: https://applause-teste.vercel.app"
          
          # Set deployment URL output
          echo "deployment_url=https://applause-teste.vercel.app" >> $GITHUB_OUTPUT

      - name: 🧪 Run production health checks
        run: |
          echo "🏥 Running production health checks..."
          
          PROD_URL="${{ steps.deploy-vercel.outputs.deployment_url }}"
          
          # Example health checks
          # curl -f $PROD_URL/api/health || exit 1
          # curl -f $PROD_URL || exit 1
          
          echo "✅ Production health checks passed!"

      - name: 📊 Performance audit
        run: |
          echo "📊 Running performance audit..."
          
          # Example Lighthouse CI
          # npm install -g @lhci/cli
          # lhci autorun --upload.target=temporary-public-storage
          
          echo "✅ Performance audit completed!"

      - name: 📝 Update deployment status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment?.id || 0,
              state: '${{ job.status }}' === 'success' ? 'success' : 'failure',
              environment_url: '${{ steps.deploy-vercel.outputs.deployment_url }}',
              description: 'Production deployment ${{ job.status }}'
            });

  # ===============================================
  # 📢 NOTIFICATION
  # ===============================================
  notify:
    name: 📢 Deployment Notification
    runs-on: ubuntu-latest
    needs: [strategy, deploy-staging, deploy-production]
    if: always() && needs.strategy.outputs.should_deploy == 'true'
    
    steps:
      - name: 📢 Send deployment notification
        uses: actions/github-script@v7
        with:
          script: |
            const environment = '${{ needs.strategy.outputs.environment }}';
            const version = '${{ needs.strategy.outputs.version }}';
            const deploymentJob = environment === 'staging' ? '${{ needs.deploy-staging.result }}' : '${{ needs.deploy-production.result }}';
            
            const status = deploymentJob === 'success' ? '✅ SUCCESS' : '❌ FAILED';
            const emoji = deploymentJob === 'success' ? '🎉' : '🚨';
            
            const title = `${emoji} Deployment ${status}`;
            const body = `
            ## ${title}
            
            **Environment:** \`${environment}\`
            **Version:** \`${version}\`
            **Status:** ${status}
            **Workflow:** [View Details](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            ${deploymentJob === 'success' ? 
              `🎯 The deployment was successful! The application is now live.` :
              `⚠️ The deployment failed. Please check the logs for more details.`
            }
            
            ---
            *Deployed at: ${new Date().toLocaleString()}*
            `;
            
            // Create a deployment comment or issue (optional)
            console.log(title);
            console.log(body);
            
            // You could send to Slack, Discord, or other notification services here
            // Example: 
            // await fetch('SLACK_WEBHOOK_URL', {
            //   method: 'POST',
            //   headers: { 'Content-Type': 'application/json' },
            //   body: JSON.stringify({ text: `${title}\n${body}` })
            // });

      - name: 🎯 Deployment summary
        run: |
          echo "📊 Deployment Summary"
          echo "===================="
          echo "Environment: ${{ needs.strategy.outputs.environment }}"
          echo "Version: ${{ needs.strategy.outputs.version }}"
          echo "Status: ${{ needs.deploy-staging.result || needs.deploy-production.result }}"
          echo "Workflow: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" 